{"ts":1361250596771,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"ts":1361251170871,"patch":[[{"diffs":[[1,"\nvar Plugin = {};\n\nPlugin.views = [];\n\n"]],"start1":0,"start2":0,"length1":0,"length2":39}]],"length":39,"saved":false}
{"ts":1361251178342,"patch":[[{"diffs":[[-1,"\n"],[0,"var Plug"]],"start1":0,"start2":0,"length1":9,"length2":8},{"diffs":[[0,"ws = [];"],[-1,"\n\n"]],"start1":28,"start2":28,"length1":10,"length2":8}]],"length":36,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361252921605,"patch":[[{"diffs":[[0,"lugin = "],[1,"function()"],[0,"{};\n\nPlu"]],"start1":5,"start2":5,"length1":16,"length2":26},{"diffs":[[0,"ws = [];"],[1,"\n\nmodule.exports = Plugin;"]],"start1":38,"start2":38,"length1":8,"length2":34}]],"length":72,"saved":false}
{"ts":1361252980349,"patch":[[{"diffs":[[0,"\nPlugin."],[1,"prototype."],[0,"views = "]],"start1":27,"start2":27,"length1":16,"length2":26}]],"length":82,"saved":false}
{"ts":1361253041540,"patch":[[{"diffs":[[0,"unction("],[1,"properties"],[0,"){};\n\nPl"]],"start1":14,"start2":14,"length1":16,"length2":26}]],"length":92,"saved":false}
{"ts":1361253047593,"patch":[[{"diffs":[[0,"gin."],[-1,"prototype."],[0,"view"]],"start1":41,"start2":41,"length1":18,"length2":8}]],"length":82,"saved":false}
{"ts":1361254268108,"patch":[[{"diffs":[[-1,"var Plugin = function(properties){};\n\nPlugin.views = [];"],[1,"function Plugin (obj, options) {\n  if (!(this instanceof Plugin))\n    return new Plugin(obj, options);\n}"],[0,"\n\nmo"]],"start1":0,"start2":0,"length1":60,"length2":108}]],"length":130,"saved":false}
{"ts":1361254278924,"patch":[[{"diffs":[[0,"tions);\n"],[1,"    \n    this.views = [];\n"],[0,"}\n\nmodul"]],"start1":95,"start2":95,"length1":16,"length2":42}]],"length":156,"saved":false}
{"ts":1361254311865,"patch":[[{"diffs":[[0,"s = [];\n"],[1,"    \n    if (obj) {\n        this.add(obj);\n    }\n\n"],[0,"}\n\nmodul"]],"start1":121,"start2":121,"length1":16,"length2":66}]],"length":206,"saved":false}
{"ts":1361254731553,"patch":[[{"diffs":[[0,"his."],[-1,"add(obj"],[1,"views.push(obj.views"],[0,");\n "]],"start1":158,"start2":158,"length1":15,"length2":28}]],"length":219,"saved":false}
{"ts":1361255139587,"patch":[[{"diffs":[[1,"var _ = require('underscore');\n\n"],[0,"function"]],"start1":0,"start2":0,"length1":8,"length2":40},{"diffs":[[0,"(obj) {\n"],[1,"        if (!_.isUndefined(obj.views) && !_.isNull(obj.views)) {\n            if (_.isArray(obj.views)) {\n                obj.views.forEach(function(view) {\n                   this.views.push(obj.views); \n                });\n            } \n        }\n"],[0,"        "]],"start1":173,"start2":173,"length1":16,"length2":265}]],"length":500,"saved":false}
{"ts":1361255141077,"patch":[[{"diffs":[[0,"  }\n"],[-1,"        this.views.push(obj.views);\n"],[0,"    "]],"start1":426,"start2":426,"length1":44,"length2":8}]],"length":464,"saved":false}
{"ts":1361255168765,"patch":[[{"diffs":[[0,"    "],[-1,"if (!_.isUndefined(obj.views) && !_.isNull(obj.views)) {\n            if (_.isArray(obj.views)) {\n                obj.views.forEach(function(view) {\n                   this.views.push(obj.views); \n                });\n            } \n        }"],[1,"this.views = obj.views;"],[0,"\n   "]],"start1":185,"start2":185,"length1":248,"length2":31}]],"length":247,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361578646277,"patch":[[{"diffs":[[0,"xports ="],[1," new"],[0," Plugin"],[1,"()"],[0,";"]],"start1":231,"start2":231,"length1":16,"length2":22}]],"length":253,"saved":false}
{"ts":1361578660540,"patch":[[{"diffs":[[0,"ts ="],[-1," new"],[0," Plugin"],[-1,"()"],[0,";"]],"start1":235,"start2":235,"length1":18,"length2":12}]],"length":247,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361737952552,"patch":[[{"diffs":[[0,";\n    }\n"],[-1,"\n"],[0,"}\n\nmodul"]],"start1":211,"start2":211,"length1":17,"length2":16}]],"length":246,"saved":false}
{"ts":1361740895999,"patch":[[{"diffs":[[0,"s = "],[-1,"[]"],[1,"{}"],[0,";\n  "]],"start1":153,"start2":153,"length1":10,"length2":10}]],"length":246,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366739973698,"patch":[[{"diffs":[[0,"re')"],[-1,";\n\nfunction Plugin (obj, options) {\n  if (!(this instanceof Plugin))\n    return new Plugin(obj, options);\n    \n    this.views = {};\n    \n    if (obj) {\n        this.views = obj.views;\n    }"],[1,",\n    Template = require('./template');\n\n/** \n * A Plugin represents a separate piece of functionality in a Ghiraldi app.  Ghiraldi\n * apps are generally composed of a number of functional plugins.\n * \n * Plugins handle, among other things, the rendering of views.\n **/\nfunction Plugin (obj, options) {\n  if (!(this instanceof Plugin))\n    return new Plugin(obj, options);\n    \n    this.views = {};\n    this.baseDir = null;\n    this.fileName = null;\n    this.name = null;\n    \n    // Contains a cache of the rendered views.  This eliminates the need for re-building the views\n    // on every call.\n    this.viewCache = {};\n    \n    if (obj) {\n        this.views = obj.views;\n    }\n    \n    this.getView = function(viewName) {\n        if (!_.isUndefined(this.views[viewName]) && !_.isNull(this.views[viewName])) {\n            if (!_.isUndefined(this.viewCache[viewName]) && !_.isNull(this.viewCache[viewName])) {\n                return this.viewCache[viewName];\n            } else {\n                this.viewCache[viewName] = new Template(this.views[viewName].uri);\n            }\n        } else {\n            throw \"No view found with name \" + viewName + \" in this plugin\";\n        }\n    };\n    \n    this.get = function() {\n        if (!_.isNull(this.basedir) \n            && !_.isNull(this.requireFile))\n            return require(this.baseDir + '/' + this.fileName);\n        return null;\n    };\n    \n    /**\n     * Get a module from within this plugin's base directory.\n     * @param modulePath the path to the module. (including the beginning /)\n     * @return the complete module path which can be passed to \"require\"\n     **/\n    this.getModule = function(path) {\n        return this.baseDir + path;\n    }\n    "],[0,"\n}\n\n"]],"start1":25,"start2":25,"length1":197,"length2":1722}]],"length":1771,"saved":false}
